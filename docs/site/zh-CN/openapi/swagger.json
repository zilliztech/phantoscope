swagger: '2.0'
info:
  description: Phantoscope open api
  version: 1.0.0
  title: Phantoscope Open Api
  contact:
    email: boyan.wang@zilliz.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: petstore.swagger.io
# basePath: /v1
tags:
- name: application
  description: The application defines the data structure and pipeline
- name: pipeline
  description: The pipeline describes how to organize processor
- name: operator
  description: The operator is the minimal work unit
# schemes:
# - http
paths:
  /application:
    get:
      tags:
      - application
      summary: view application list
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful get all applications
          schema:
            type: array
            items:
              $ref: '#/definitions/Application'
        500:
          description: server error
          schema:
            $ref: '#/definitions/Error'
  /application/{applicationName}:
    get:
      tags:
      - application
      summary: get application detail
      produces:
      - application/json
      parameters:
      - name: applicationName
        in: path
        description: application name
        type: string
        required: true
      responses:
        200:
          description: successful get application message
          schema:
            $ref: '#/definitions/Application'
        404:
          description: application not found
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - application
      summary: create a new application
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: applicationName
        description: application name
        type: string
        required: true
      - in: body
        name: fields
        description: custom fields; if type is "integer" or  "string",fields should contain "value", if type is "object", fields should contain "pipeline", the value of  "pipeline"  is pipeline name
        schema:
          $ref: '#/definitions/Application'
      responses:
        201:
          description: successful create
          schema:
            $ref: '#/definitions/Application'
    delete:
      tags:
      - application
      summary: delete a applicaiton
      produces:
      - application/json
      parameters:
      - in: path
        name: applicationName
        description: application name
        type: string
        required: true
      responses:
        200:
          description: successful delete
          schema:
            $ref: '#/definitions/Application'
  /application/{applicationName}/search:
    post:
      tags:
      - application
      summary: search by application
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: applicationName
        description: application name
        type: string
        required: true
      - in: body
        name: fields
        description: none
        schema:
          $ref: '#/definitions/SearchFields'
      responses:
        200:
          description: succesful search
          schema:
            type: array
            items:
              $ref: '#/definitions/Entity'

  /application/{applicationName}/upload:
    post:
      tags:
      - application
      summary: upload images to a application
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: applicationName
        description: application name
        type: string
        required: true
      - in: body
        name: fields
        description: if the key which in application is "integer" or "string", fields only need "value";if it is "object", you need use "data" or "url";"data" is a string that is encoded in base64 for an image.if "data" and "url".only data is used if both data and url exist.
        schema:
          $ref: '#/definitions/UploadFields'
      responses:
        200:
          description: succesful
          schema:
            $ref: '#/definitions/Entity'
  /application/{applicationName}/entity:
    get:
      tags:
      - application
      summary: get all data under a application
      produces:
      - application/json
      parameters:
      - in: path
        name: applicationName
        description: applicaiton name
        type: string
        required: true
      responses:
        200:
          description: succesful
          schema:
            type: array
            items:
              $ref: '#/definitions/Entity'
  /application/{applicationName}/entity/{entityName}:
    delete:
      tags:
      - application
      summary: delete a entity under a application
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: applicationName
        description: application name
        type: string
        required: true
      - in: path
        name: entityName
        description: entity name
        type: string
        required: true
      responses:
        200:
          description: succesful delete a entity
          schema:
            $ref: '#/definitions/Entity'
  /pipeline:
    get:
      tags:
      - pipeline
      summary: get all pipeline
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Pipeline'
  /pipeline/{pipelineName}:
    get:
      tags:
      - pipeline
      summary: get pipeline detail
      produces:
      - application/json
      parameters:
      - in: path
        name: pipelineName
        description: pipeline name
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Pipeline'
    post:
      tags:
      - pipeline
      summary: create a pipeline
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: pipelineName
        description: pipeline name
        required: true
        type: string
      - in: body
        name: body
        schema:
          $ref: '#/definitions/Pipeline'
      responses:
        200:
          description: successful create a pipeline
          schema:
            $ref: '#/definitions/Pipeline'
    delete:
      tags:
      - pipeline
      summary: delete a pipeline
      produces:
      - application/json
      parameters:
      - in: path
        name: pipelineName
        description: pipeline name
        required: true
        type: string
      description: none
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Pipeline'
  /operator:
    get:
      tags:
      - operator
      summary: operator list
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Operator'
  /operator/regist:
    post:
      tags:
      - operator
      summary: regist a operator
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        description: name and endpoint is required; endpoint need port like  ip:port;when you regist a oprator make sure you can visit this endpoint;
        required: true
        schema:
          $ref: '#/definitions/OperatorPost'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Operator'
  /opetator/{operatorName}:
    get:
      tags:
      - operator
      summary: get operator detail
      produces:
      - application/json
      parameters:
      - name: operatorName
        in: path
        description: operator name
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Operator'
    delete:
      tags:
      - operator
      summary: delete a operator
      produces:
      - application/json
      parameters:
      - name: operatorName
        in: path
        description: operator name
        required: true
        type: string
      responses:
        200:
          description: successful delete a oeprator
          schema:
            $ref: '#/definitions/Operator'
definitions:
  Application:
    type: object
    properties:
      fields:
        $ref: '#/definitions/Fields'
      s3Buckets:
        type: string
  Fields:
    type: object
    additionalProperties:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
  UploadFields:
    type: object
    additionalProperties:
      type: object
      properties:
        value:
          type: string
        data:
          type: string
        url:
          type: string
  SearchFields:
    type: object
    properties:
      topk:
        type: string
    additionalProperties:
      type: object
      properties:
        value:
          type: string
        data:
          type: string
        url:
          type: string
  Pipeline:
    type: object
    properties:
      name:
        type: string
      input:
        type: string
      description:
        type: string
      processors:
        type: array
        items:
          type: string
      encoder:
        type: string
      indexFileSize:
        type: integer
  Operator:
    type: object
    properties:
      name:
        type: string
      backend:
        type: string
      type:
        type: string
      input:
        type: string
      outout:
        type: string
      endpoint:
        type: string
      metric_type:
        type: string
      dimension:
        type: integer
  OperatorPost:
    type: object
    properties:
      name:
        type: string
      endpoint:
        type: string
  Entity:
    type: object
    properties:
      id:
        type: string
      app_name:
        type: string
      image_url:
        type: string
      fields:
        $ref: '#/definitions/Fields'
  Error:
    type: object
    properties:
      message:
        type: string
      error:
        type: string
schemes:
 - http
basePath: /v1
# Added by API Auto Mocking Plugin
host: local_addr:5000
