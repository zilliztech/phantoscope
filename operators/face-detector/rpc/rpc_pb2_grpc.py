# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rpc_pb2 as rpc__pb2


class OperatorStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Execute = channel.unary_unary(
                '/omnisearch.Operator/Execute',
                request_serializer=rpc__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=rpc__pb2.ExecuteReply.FromString,
                )
        self.Healthy = channel.unary_unary(
                '/omnisearch.Operator/Healthy',
                request_serializer=rpc__pb2.HealthyRequest.SerializeToString,
                response_deserializer=rpc__pb2.HealthyReply.FromString,
                )
        self.Identity = channel.unary_unary(
                '/omnisearch.Operator/Identity',
                request_serializer=rpc__pb2.IdentityRequest.SerializeToString,
                response_deserializer=rpc__pb2.IdentityReply.FromString,
                )


class OperatorServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Execute(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Healthy(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Identity(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OperatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=rpc__pb2.ExecuteRequest.FromString,
                    response_serializer=rpc__pb2.ExecuteReply.SerializeToString,
            ),
            'Healthy': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthy,
                    request_deserializer=rpc__pb2.HealthyRequest.FromString,
                    response_serializer=rpc__pb2.HealthyReply.SerializeToString,
            ),
            'Identity': grpc.unary_unary_rpc_method_handler(
                    servicer.Identity,
                    request_deserializer=rpc__pb2.IdentityRequest.FromString,
                    response_serializer=rpc__pb2.IdentityReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'omnisearch.Operator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Operator(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/omnisearch.Operator/Execute',
            rpc__pb2.ExecuteRequest.SerializeToString,
            rpc__pb2.ExecuteReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Healthy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/omnisearch.Operator/Healthy',
            rpc__pb2.HealthyRequest.SerializeToString,
            rpc__pb2.HealthyReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Identity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/omnisearch.Operator/Identity',
            rpc__pb2.IdentityRequest.SerializeToString,
            rpc__pb2.IdentityReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
